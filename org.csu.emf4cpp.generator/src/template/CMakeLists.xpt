«REM»
CMakeLists.ext
Copyright (C) Cátedra SAES-UMU 2010 <andres.senac@um.es>
Copyright (C) INCHRON GmbH 2016 <soeren.henning@inchron.com>
Copyright (C) INCHRON AG 2023 <emf4cpp@inchron.com>

EMF4CPP is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

EMF4CPP is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
«ENDREM»

«IMPORT org::eclipse::emf::ecore»

«EXTENSION template::FQN»
«EXTENSION template::Packages»

«DEFINE MainCMake FOR EPackage»
«FILE "CMakeLists.txt" NOOVERWRITE-»
«IF (boolean) GLOBALVAR internalLicense-»
«EXPAND template::License::LicenseMakefile FOR "CMakeLists.txt"-»
«ELSE-»
«EXPAND template::EndUserLicense::LicenseMakefile FOR "CMakeLists.txt"-»
«ENDIF-»
cmake_minimum_required(VERSION 3.1.0)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

project(emf4cpp-«name» CXX)

FILE(GLOB CMAKES "${CMAKE_CURRENT_SOURCE_DIR}/*.cmake")

foreach(cmake ${CMAKES})
  include(${cmake})
endforeach(cmake)

«ENDFILE-»
«ENDDEFINE»

«DEFINE SOURCES FOR EPackage-»
    ${CMAKE_CURRENT_SOURCE_DIR}/«getFQN("/")».cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«getPackagePrefix("/")».cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«getFactoryPrefix("/")».cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«getPackagePrefix("/")»Impl.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«getFactoryPrefix("/")»Impl.cpp
    «FOREACH EClassifiers.typeSelect(EClass) AS class-»
    ${CMAKE_CURRENT_SOURCE_DIR}/«class.getFQN("/")».cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«class.getFQN("/")»Impl.cpp
    «ENDFOREACH-»
«EXPAND SOURCES FOREACH ESubpackages-»
«ENDDEFINE»

«DEFINE HEADERS FOR EPackage-»
	${CMAKE_CURRENT_SOURCE_DIR}/«getFQN("/")».hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«getFQN("/")»_forward.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«getPackagePrefix("/")».hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«getFactoryPrefix("/")».hpp
    «FOREACH EClassifiers.typeSelect(EClass) AS class-»
    ${CMAKE_CURRENT_SOURCE_DIR}/«class.getFQN("/")».hpp
    «ENDFOREACH-»
«EXPAND HEADERS FOREACH ESubpackages-»
«ENDDEFINE»

«DEFINE INSTALL FOR EPackage-»
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/«getFQN("/")».hpp DESTINATION include/emf4cpp/«getDirFQN()»)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/«getFQN("/")»_forward.hpp DESTINATION include/emf4cpp/«getDirFQN()»)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/«getFactoryPrefix("/")».hpp DESTINATION include/emf4cpp/«getFQN("/")»)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/«getPackagePrefix("/")».hpp DESTINATION include/emf4cpp/«getFQN("/")»)   
«FOREACH EClassifiers.typeSelect(EClass) AS class-»
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/«class.getFQN("/")».hpp DESTINATION include/emf4cpp/«getFQN("/")»)
«ENDFOREACH-»
«EXPAND INSTALL FOREACH ESubpackages-»
«ENDDEFINE»

«DEFINE CMake FOR EPackage»
«LET getFQN("_") AS fqn»
«FILE fqn+".cmake"-»
«IF (boolean) GLOBALVAR internalLicense»
«EXPAND template::License::LicenseMakefile FOR fqn+".cmake"-»
«ELSE»
«EXPAND template::EndUserLicense::LicenseMakefile FOR fqn+".cmake"-»
«ENDIF»
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g -DDEBUG")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3 -funroll-loops")

string(TOLOWER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_LOWER)

set(«fqn»_SOURCES
«EXPAND SOURCES FOR this-»
)

set(«fqn»_HEADERS
«EXPAND HEADERS FOR this-»
)

«EXPAND INSTALL FOR this-»
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/«getDllExtensionPrefix()».hpp DESTINATION include/emf4cpp/«getFQN("/")»)

include_directories(${CMAKE_CURRENT_SOURCE_DIR} «GLOBALVAR ecorePath» «GLOBALVAR ecoreCppPath»)
«IF (boolean) GLOBALVAR bootstrap-»
«ELSE-»
link_directories(«GLOBALVAR ecoreLibraryPath»)
«ENDIF-»

«IF (boolean) GLOBALVAR staticLibrary-»
add_library(emf4cpp-«fqn» STATIC ${«fqn»_HEADERS} ${«fqn»_SOURCES})
«IF (boolean) GLOBALVAR internalLicense-»
set_target_properties(emf4cpp-«fqn» PROPERTIES COMPILE_FLAGS "-DMAKE_«getHeaderDef()»_STATIC" VERSION 3.0.0 SOVERSION 3)
«ELSE-»
set_target_properties(emf4cpp-«fqn» PROPERTIES COMPILE_FLAGS "-DMAKE_«getHeaderDef()»_STATIC" VERSION 0.0.1 SOVERSION 1)
«ENDIF-»
«ELSE-»
add_library(emf4cpp-«fqn» SHARED ${«fqn»_HEADERS} ${«fqn»_SOURCES})
«IF (boolean) GLOBALVAR internalLicense-»
set_target_properties(emf4cpp-«fqn» PROPERTIES COMPILE_FLAGS "-DMAKE_«getHeaderDef()»_DLL" VERSION 3.0.0 SOVERSION 3)
«ELSE-»
set_target_properties(emf4cpp-«fqn» PROPERTIES COMPILE_FLAGS "-DMAKE_«getHeaderDef()»_DLL" VERSION 0.0.1 SOVERSION 1)
«ENDIF-»
set_property(TARGET emf4cpp-«fqn» APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)
«ENDIF-»
«IF (boolean) GLOBALVAR bootstrap-»
«ELSE-»
target_link_libraries(emf4cpp-«fqn» emf4cpp-ecore)
«ENDIF-»

install(TARGETS emf4cpp-«fqn» DESTINATION lib)

«ENDFILE»
«ENDLET»
«ENDDEFINE»
