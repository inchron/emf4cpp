«REM»
PackageImpl.xpt
Copyright (C) Cátedra SAES-UMU 2010 <andres.senac@um.es>
Copyright (C) INCHRON AG 2020 <emf4cpp@inchron.com>

EMF4CPP is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

EMF4CPP is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
«ENDREM»

«IMPORT org::eclipse::emf::ecore»

«EXTENSION template::FQN»
«EXTENSION template::Mapping»
«EXTENSION template::IDs»
«EXTENSION template::Packages»
«EXTENSION template::Attributes»
«EXTENSION template::Types»


«DEFINE makeInstance FOR EClassifier-»
    «EPackage.getPackageAttribute(this)» = ::ecore::make<::ecore::«eClass().name»>();
«ENDDEFINE-»

«DEFINE makeInstance FOR EStructuralFeature-»
    «EContainingClass.EPackage.getFeatureMember(this)» = ::ecore::make<::ecore::«eClass().name»>();
«ENDDEFINE-»

«DEFINE makeInstance FOR EOperation-»
    «REM»«EContainingClass.EPackage.getOperationMember(this)» = ::ecore::make<::ecore::«eClass().name»>();«ENDREM-»
«ENDDEFINE-»

«DEFINE makeInstance FOR EClass-»
    «EXPAND makeInstance FOREACH EOperations-»
    «EXPAND makeInstance FOREACH EStructuralFeatures-»
    «EPackage.getPackageAttribute(this)» = ::ecore::make<::ecore::«eClass().name»>();
«ENDDEFINE-»


«REM»
param variableName is the C-identifier of a variable that is an instance of EModelElement
«ENDREM»
«DEFINE setAnnotations(String variableName) FOR EAnnotation-»
    { // Annotations for «source»
        auto&& eAnnotation = «variableName»->getEAnnotation("«source»");
        «FOREACH details AS detail-»
            eAnnotation->setDetail( "«((ecore::EStringToStringMapEntry)detail).key»", "«cxx(((ecore::EStringToStringMapEntry)detail).value)»" );
        «ENDFOREACH-»
    }
«ENDDEFINE-»

«REM»
param pkg is the EPackage for which to generate this code (usually "this")
param variableName is the C-identifier of a variable that is a reference to an instance of EList<EGenericType>
«ENDREM»
«DEFINE addTypeArgument(EPackage pkg, String variableName) FOR EGenericType-»
    {
        auto&& eTypeArgument = ::ecore::make<::ecore::EGenericType>();
        «IF EClassifier != null-»
            eTypeArgument->setEClassifier(«pkg.getPackageAttribute(EClassifier)»);
        «ENDIF-»
        «variableName».push_back(eTypeArgument);
    }
«ENDDEFINE-»

«REM»
param pkg is the EPackage for which to generate this code (usually "this")
param variableName is the C-identifier of a variable that is an instance of ETypedElement
«ENDREM»
«DEFINE addGenericType(EPackage pkg, String variableName) FOR EGenericType-»
    { // GenericType
        auto eGenericType = ::ecore::make<::ecore::EGenericType>();
        eGenericType->setEClassifier(«pkg.getPackageAttribute(EClassifier)»);
        auto&& eTypeArguments = eGenericType->getETypeArguments();
        «EXPAND addTypeArgument(pkg, "eTypeArguments") FOREACH ETypeArguments-»
        «variableName»->setEGenericType(eGenericType);
    }
«ENDDEFINE-»


«DEFINE hppcpp FOR EPackage»
«FILE getPackagePrefix()+"Impl.cpp"-»
«IF (boolean) GLOBALVAR internalLicense»
«EXPAND template::License::License FOR getPackagePrefix()+"Impl.cpp"-»
«ELSE»
«EXPAND template::EndUserLicense::License FOR getPackagePrefix()+"Impl.cpp"-»
«ENDIF»
#include <«getPackagePrefix()».hpp>
#include <«getFactoryPrefix()».hpp>
#include <ecore.hpp>
#include <ecore/EcorePackage.hpp>
#include <ecore/EClass.hpp>
#include <ecore/EAttribute.hpp>
#include <ecore/EReference.hpp>
#include <ecore/EOperation.hpp>
#include <ecore/EParameter.hpp>
#include <ecore/EEnum.hpp>
#include <ecore/EEnumLiteral.hpp>
#include <ecore/EDataType.hpp>
#include <ecore/EGenericType.hpp>
#include <ecore/ETypeParameter.hpp>
«LET getExternalTypes() AS types-»
    «FOREACH types.EPackage.toSet() AS pkg-»
#include <«pkg.getFQN("/")»/«pkg.getPackageName()».hpp>
    «ENDFOREACH-»
    «FOREACH types.typeSelect(EClass) AS e-»
#include <«e.getFQN("/")».hpp>
    «ENDFOREACH-»
«ENDLET-»

using namespace ::«getFQN()»;

«name.toFirstUpper()»Package::«name.toFirstUpper()»Package()
{
    «EXPAND makeInstance FOREACH EClassifiers.sortBy(e|e.name).sortBy(e|e.name.toUpperCase())-»
}

void «name.toFirstUpper()»Package::_initPackage()
{
    [this](){ // Factory
        auto&& _fa = «name.toFirstUpper()»Factory::_instance();
        basicsetEFactoryInstance(_fa);
        _fa->basicsetEPackage(_this());
    }();

    // Create classes and their features
«FOREACH EClassifiers.sortBy(e|e.name).sortBy(e|e.name.toUpperCase()) AS classifier ITERATOR it»
    «IF EClass.isInstance(classifier)»
    «LET ((EClass)classifier) AS class-»
        «FOREACH class.EStructuralFeatures AS esf»
    [this]() { // Feature «esf.name» of class «class.name»
        auto&& feature = «getFeatureMember(esf)»;

        // ENamedElement
        feature->setName("«esf.name»");

        // ETypedElement
        feature->setLowerBound(«esf.lowerBound»);
        feature->setOrdered(«esf.ordered»);
        feature->setUnique(«esf.unique»);
        feature->setUpperBound(«esf.upperBound»);

        // EStructuralFeature
        feature->setChangeable(«esf.changeable»);
        feature->setDefaultValueLiteral("«esf.defaultValueLiteral»");
        feature->setDerived(«esf.derived»);
        feature->setEType(«getPackageAttribute(esf.EType)»);
        feature->setTransient(«esf.transient»);
        feature->setUnsettable(«esf.unsettable»);
        feature->setVolatile(«esf.volatile»);

        feature->setFeatureID(«esf.getCPPFQN()»);
        feature->basicsetEContainingClass(«getPackageAttribute(class)»);
        «IF EAttribute.isInstance(esf)-»
            «LET ((EAttribute)esf) AS at-»

        // EAttribute
        feature->setEAttributeType(«getPackageAttribute(at.EAttributeType)»);
        feature->setID(«at.getID()»);
            «ENDLET-»
        «ENDIF-»
        «IF EReference.isInstance(esf)-»
            «LET ((EReference)esf) AS ref-»

        // EReference
        feature->setEReferenceType(«getPackageAttribute(ref.EReferenceType)»);
        feature->setContainment(«ref.containment»);
            «IF ref.EOpposite != null-»
        feature->setEOpposite( «getFeatureMember(ref.EOpposite)» );
            «ENDIF-»
        feature->setResolveProxies(«ref.resolveProxies»);
            «ENDLET-»
        «ENDIF-»
    }();
        «ENDFOREACH»
    «ENDLET-»
    «ENDIF»

    [this]() { // Classifier «classifier.name»
        auto&& classifier = «getPackageAttribute(classifier)»;

        // ENamedElement
        classifier->setName("«classifier.name»");

        // EClassifier
        classifier->setClassifierID(«classifier.name.toUpperCase()»);
        «IF EClass.isInstance(classifier)-»
            «LET ((EClass)classifier) AS class-»

        // EClass
        classifier->setAbstract(«class.abstract»);
        classifier->setInterface(«class.interface»);
                «IF !class.EStructuralFeatures.isEmpty-»
        {
            auto&& eStructuralFeatures = static_cast<::ecorecpp::mapping::ReferenceEListImpl<::ecore::EStructuralFeature_ptr, -1, true, true >&>(«getPackageAttribute(class)»->getEStructuralFeatures());
                    «FOREACH class.EStructuralFeatures AS esf-»
            eStructuralFeatures.basicAdd(«getFeatureMember(esf)»);
                    «ENDFOREACH-»
         }
                «ENDIF-»
            «ENDLET-»
        «ENDIF-»
        «IF EDataType.isInstance(classifier)-»
            «LET ((EDataType)classifier) AS dt-»

        // EDataType
        classifier->setSerializable(«dt.serializable»);
            «ENDLET-»
        «ENDIF-»
    }();
«ENDFOREACH»
«IF !ESubpackages.isEmpty-»

    [this]() { // Subpackages of this package
        auto&& eSubpackages = getESubpackages();
        «FOREACH ESubpackages AS sub-»
            eSubpackages.push_back( ::«sub.getPackagePrefix("::")»::_getInstanceAndRemoveOwnership());
        «ENDFOREACH-»
    }();
«ENDIF-»

    // Initialize package
    setName("«this.name»");
    setNsPrefix("«this.nsPrefix»");
    setNsURI("«this.nsURI»");

    // TODO: bounds for type parameters
«IF !EClassifiers.typeSelect(EDataType).ETypeParameters.isEmpty-»
    // Create type parameters
    [this](){
        «FOREACH EClassifiers.typeSelect(EDataType).select(e|!e.ETypeParameters.isEmpty) AS dt»
            «FOREACH dt.ETypeParameters AS tp-»
            {
            auto _tp = ::ecore::make<::ecore::ETypeParameter>();
            _tp->setName("«tp.name»");
            «getPackageAttribute(dt)»->getETypeParameters().push_back( _tp );
            }
            «ENDFOREACH-»
        «ENDFOREACH-»
    }();
«ENDIF-»

«IF !EClassifiers.typeSelect(EClass).ESuperTypes.isEmpty-»
    // Add supertypes to classes
    [this]() {
        «FOREACH EClassifiers.typeSelect(EClass) AS class-»
            «FOREACH class.ESuperTypes AS st-»
                «getPackageAttribute(class)»->getESuperTypes().push_back(«getPackageAttribute(st)»);
            «ENDFOREACH-»
        «ENDFOREACH-»
    }();
«ENDIF-»

«FOREACH EClassifiers.typeSelect(EClass) AS class-»

    «FOREACH class.EStructuralFeatures AS esf ITERATOR it-»
    «IF !esf.EAnnotations.isEmpty || !esf.EGenericType.ETypeArguments.isEmpty-»
    [this]() { // Feature «esf.name» of class «class.name»
        auto&& feature = «getFeatureMember(esf)»;
        «EXPAND setAnnotations("feature") FOREACH esf.EAnnotations-»
        «IF !esf.EGenericType.ETypeArguments.isEmpty-»
            «EXPAND addGenericType(this, "feature") FOR esf.EGenericType-»
        «ENDIF-»
    }();
    «ENDIF-»
    «ENDFOREACH-»
    «IF !class.EAnnotations.isEmpty || !class.EOperations.isEmpty-»

    [this]() { // Class «class.name»
        auto&& cls = «getPackageAttribute(class)»;
        «EXPAND setAnnotations("cls") FOREACH class.EAnnotations-»
        «IF !class.EOperations.isEmpty-»

            auto&& eOperations = cls->getEOperations();
            «FOREACH class.EOperations AS op ITERATOR it-»
            { // Operation «op.name»()
                auto _op = ::ecore::make<::ecore::EOperation>();
                «EXPAND setAnnotations("_op") FOREACH op.EAnnotations-»
                «IF op.EType != null-»
                    _op->setEType(«getPackageAttribute(op.EType)»);
                    «IF !op.EGenericType.ETypeArguments.isEmpty-»
                        «EXPAND addGenericType(this, "_op") FOR op.EGenericType-»
                    «ENDIF-»
                «ENDIF-»
                _op->setName("«op.name»");
                _op->setLowerBound(«op.lowerBound»);
                _op->setUpperBound(«op.upperBound»);
                _op->setUnique(«op.unique»);
                _op->setOrdered(«op.ordered»);
                «FOREACH op.EParameters AS pa-»
                { // «pa.name»
                    auto _pa = ::ecore::make<::ecore::EParameter>();
                    «EXPAND setAnnotations("_pa") FOREACH pa.EAnnotations-»
                    _pa->setEType(«getPackageAttribute(pa.EType)»);
                    «IF !pa.EGenericType.ETypeArguments.isEmpty-»
                        «EXPAND addGenericType(this, "_pa") FOR pa.EGenericType-»
                    «ENDIF-»
                    _pa->setName("«pa.name»");
                    _pa->setLowerBound(«pa.lowerBound»);
                    _pa->setUpperBound(«pa.upperBound»);
                    _pa->setUnique(«pa.unique»);
                    _pa->setOrdered(«pa.ordered»);
                    _op->getEParameters().push_back(_pa);
                }
                «ENDFOREACH-»
                eOperations.push_back(_op);
            }
            «ENDFOREACH-»
        «ENDIF-»
    }();
    «ENDIF-»

«ENDFOREACH»

«FOREACH EClassifiers.typeSelect(EEnum) AS ee»
    «IF !ee.EAnnotations.isEmpty || !ee.ELiterals.isEmpty-»
    [this]() { // EEnum «ee.name»
        auto&& eEnum = «getPackageAttribute(ee)»;
        «EXPAND setAnnotations("eEnum") FOREACH ee.EAnnotations-»
    «IF !ee.ELiterals.isEmpty-»
        { // Literals
        auto&& eLiterals = eEnum->getELiterals();
        «FOREACH ee.ELiterals AS el-»
            { // Literal «el.name»
                auto _el = ::ecore::make<::ecore::EEnumLiteral>();
                «EXPAND setAnnotations("_el") FOREACH el.EAnnotations-»
                _el->setName("«el.name»");
                «IF el.value != 0-»
                _el->setValue(«el.value»);
                «ELSE-»
                _el->setValue(eLiterals.size());
                «ENDIF-»
                _el->setLiteral("«el.literal»");
                _el->setEEnum(eEnum);
                eLiterals.push_back(_el);
            }
        «ENDFOREACH-»
        }
    «ENDIF-»
    }();
    «ENDIF-»
«ENDFOREACH»

«FOREACH EClassifiers.typeSelect(EDataType).select(e|!EEnum.isInstance(e)) AS datatype-»
    «IF !datatype.EAnnotations.isEmpty-»
        [this]() { // Annotations for Datatype «datatype.name»
            auto&& datatype = «getPackageAttribute(datatype)»;
            «EXPAND setAnnotations("datatype") FOREACH datatype.EAnnotations-»
        }();
    «ENDIF-»
«ENDFOREACH-»
«IF !EAnnotations.isEmpty-»

    [this]() { // Annotations for this package
        «EXPAND setAnnotations("this") FOREACH EAnnotations-»
    }();
«ENDIF-»
«IF !EClassifiers.isEmpty-»

    [this]() { // Classifiers of this package
        auto&& classifiers = getEClassifiers();
        «FOREACH EClassifiers.sortBy(e|e.name).sortBy(e|e.name.toUpperCase()) AS classifier-»
            classifiers.push_back(«getPackageAttribute(classifier)»);
        «ENDFOREACH-»
    }();
«ENDIF-»

    _initialize();
}

«FOREACH EClassifiers AS class-»
::ecore::«class.eClass().name»_ptr «name.toFirstUpper()»Package::«getPackageGetAttribute(class)»()
{
    return «getPackageAttribute(class)»;
}
«ENDFOREACH-»

«FOREACH getStructuralFeatures() AS ef-»
::ecore::«ef.eClass().name»_ptr «name.toFirstUpper()»Package::«getFeatureGetMember(ef)»()
{
    return «getFeatureMember(ef)»;
}
«ENDFOREACH-»

«ENDFILE»
«ENDDEFINE»
