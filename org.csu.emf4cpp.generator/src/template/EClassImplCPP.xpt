«REM»
ClassImplCPP.xpt
Copyright (C) Cátedra SAES-UMU 2010 <andres.senac@um.es>
Copyright (C) INCHRON GmbH 2016 <soeren.henning@inchron.com>
Copyright (C) INCHRON AG 2020 <emf4cpp@inchron.com>

EMF4CPP is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

EMF4CPP is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
«ENDREM»

«IMPORT org::eclipse::emf::ecore»

«EXTENSION template::FQN»
«EXTENSION template::Types»
«EXTENSION template::Member»
«EXTENSION template::Classes»
«EXTENSION template::Operations»
«EXTENSION template::Attributes»
«EXTENSION template::References»
«EXTENSION template::Packages»
«EXTENSION template::IDs»
«EXTENSION template::Mapping»

«DEFINE cpp FOR EClass»
«FILE getFQN("/")+"Impl.cpp"-»
«IF (boolean) GLOBALVAR internalLicense»
«EXPAND template::License::License FOR getFQN("/")+"Impl.cpp"-»
«ELSE»
«EXPAND template::EndUserLicense::License FOR getFQN("/")+"Impl.cpp"-»
«ENDIF»
#include "«name».hpp"
#include <«EPackage.getPackagePrefix()».hpp>
«FOREACH getAllIncludeFiles() AS include-»
#include <«include».hpp>
«ENDFOREACH-»
#include <ecore/EObject.hpp>
#include <ecore/EClass.hpp>
#include <ecore/EStructuralFeature.hpp>
#include <ecore/EReference.hpp>
#include <ecore/EObject.hpp>
#include <ecorecpp/mapping.hpp>

«PROTECT CSTART '/*' CEND '*/' ID name+"Impl.cpp" DISABLE»
// Please, enable the protected region if you add manually written code.
// To do this, add the keyword ENABLED before START.
«ENDPROTECT»

using namespace ::«EPackage.getFQN()»;

void «name»::_initialize()
{
    // Supertypes
    «FOREACH this.ESuperTypes AS st-»
    ::«st.getFQN()»::_initialize();
    «ENDFOREACH-»

    // References
    «FOREACH this.EReferences.select(e|e.containment) AS ref-»
        «IF ref.upperBound == 1-»
    if («ref.getMemberName()»)
    {
        «ref.getMemberName()»->_initialize();
    }
        «ELSE-»
    for (const auto& ref : get«ref.name.toFirstUpper()»())
    {
        ref->_initialize();
    }
        «ENDIF-»
    «ENDFOREACH-»

    «PROTECT CSTART '/*' CEND '*/' ID name+"Impl__initialize" DISABLE»
    // Please, enable the protected region if you add manually written code.
    // To do this, add the keyword ENABLED before START.
    «ENDPROTECT»
}

// Operations
«FOREACH this.EOperations AS op»
«op.getCPPSignature(name+"::")»
{
«IF op.getBody() != null-»
#if 0
    // This is the original body of the EOperation as specified in
    // the ecore. If you want to replace it by C++ code, enable
    // the following protected region and implement it there.
    «op.getBody()»
#endif
«ENDIF-»
    «PROTECT CSTART '/*' CEND '*/' ID (name+"Impl_"+op.getIPPFileUniqueName()) DISABLE»
    // Please, enable the protected region if you add manually written code.
    // To do this, add the keyword ENABLED before START.
«IF op.getBody() == null-»
    throw "UnsupportedOperationException: «op.getFQN()»";
«ELSE-»
    «IF (boolean) GLOBALVAR ignoreJavaBody-»
    throw "UnsupportedOperationException: «op.getFQN()»";
    «ELSE-»
    «op.getBody()»
    «ENDIF-»
«ENDIF-»
    «ENDPROTECT»
}
«ENDFOREACH»

// EObject
::ecore::EJavaObject «name»::eGet ( ::ecore::EInt _featureID, ::ecore::EBoolean /*_resolve*/)
{
    ::ecore::EJavaObject _any;
    switch (_featureID)
    {
    «FOREACH EAllStructuralFeatures AS ef-»
        case «ef.getCPPFQN(this)»:
            {
                «IF EReference.isInstance(ef)-»
                    «IF ef.upperBound == 1-»
                        _any = ::ecore::as<::ecore::EObject>(get«ef.name.toFirstUpper()»());
                    «ELSE-»
                        _any = get«ef.name.toFirstUpper()»().asEListOf< ::ecore::EObject_ptr >();
                    «ENDIF-»
                «ELSE-»
                    «IF ef.upperBound == 1-»
                ::ecorecpp::mapping::any_traits< ::«ef.EType.getFQN()» >::toAny(_any, «(ef.isBoolean() ? "is" : "get") + ef.name.toFirstUpper()»());
                    «ELSE-»
                 std::vector < ::ecorecpp::mapping::any> _anys(«(ef.isBoolean() ? "is" : "get") + ef.name.toFirstUpper()»().size());
                 for (size_t _i = 0; _i < «(ef.isBoolean() ? "is" : "get") + ef.name.toFirstUpper()»().size(); _i++)
                    ::ecorecpp::mapping::any_traits< ::«ef.EType.getFQN()» >::toAny(_anys[_i], «(ef.isBoolean() ? "is" : "get") + ef.name.toFirstUpper()»()[_i]);
                 _any = _anys;
                    «ENDIF-»
                «ENDIF-»
            }
            return _any;
    «ENDFOREACH»
    }
    throw "Error: eGet() does not handle this featureID";
}

void «name»::eSet ( ::ecore::EInt _featureID, [[maybe_unused]] ::ecore::EJavaObject const& _newValue)
{
    switch (_featureID)
    {
    «FOREACH EAllStructuralFeatures.select(e|e.changeable && !e.derived) AS ef-»
        case «ef.getCPPFQN(this)» :
            {
                «IF EReference.isInstance(ef)-»
                    «IF ef.upperBound == 1-»
                        auto _t0 = ::ecorecpp::mapping::any::any_cast< ::ecore::EObject_ptr >(_newValue);
                        auto _t1 = ::ecore::as< ::«ef.EType.getFQN()» >(_t0);
                        set«ef.name.toFirstUpper()»(_t1);
                    «ELSE-»
                        auto _t0 = ::ecorecpp::mapping::any::any_cast< ::ecore::EList_ptr<::ecore::EObject_ptr> >(_newValue);
                        get«ef.name.toFirstUpper()»().clear();
                        get«ef.name.toFirstUpper()»().insert_all(*_t0);
                    «ENDIF-»
                «ELSE-»
                    «IF ef.isList() || ef.isMultiple()-»
                        auto _t0 = ::ecorecpp::mapping::any::any_cast<std::vector<::ecorecpp::mapping::any>>(_newValue);
                        «ef.getCPPTypeSignature()» _t1;
                        _t1.reserve(_t0.size());
                        for (const auto& anyValue : _t0) {
                        	«ef.EType.getFQN()» value;
                        	::ecorecpp::mapping::any_traits<«ef.EType.getFQN()»>::fromAny(anyValue, value);
                        	_t1.push_back(value);
                        }
                        set«ef.name.toFirstUpper()»(_t1);
                    «ELSE-»
                    	«ef.getCPPTypeSignatureImpl()» _t0;
                        ::ecorecpp::mapping::any_traits< ::«ef.EType.getFQN()» >::fromAny(_newValue, _t0);
                        set«ef.name.toFirstUpper()»(_t0);
                    «ENDIF-»
                «ENDIF-»
            }
            return;
    «ENDFOREACH»
    }
    throw "Error: eSet() does not handle this featureID";
}

::ecore::EBoolean «name»::eIsSet ( ::ecore::EInt _featureID)
{
    switch (_featureID)
    {
    «FOREACH EAllStructuralFeatures.select(e|e.EType.ETypeParameters.isEmpty) AS ef-»
        case «ef.getCPPFQN(this)» :
            «IF EReference.isInstance(ef)-»
                «IF ef.upperBound == 1-»
                    return get«ef.name.toFirstUpper()»().get() != nullptr;
                «ELSE-»
                    return get«ef.name.toFirstUpper()»().size() > 0;
                «ENDIF-»
            «ELSE-»
                «IF ef.isList() || ef.isMultiple()-»
                    return «(ef.isBoolean() ? "is" : "get") + ef.name.toFirstUpper()»().size() > 0;
                «ELSE-»
                    «IF ef.defaultValueLiteral != null && ef.defaultValueLiteral != "" -»
                        «IF ef.EType.name == "EString"-»
                            return «(ef.isBoolean() ? "is" : "get") + ef.name.toFirstUpper()»() != "«ef.defaultValueLiteral»";
                        «ELSEIF ef.EType.name == "EDate"-»
                            return «(ef.isBoolean() ? "is" : "get") + ef.name.toFirstUpper()»() != ::ecorecpp::mapping::EDate("«ef.defaultValueLiteral»");
                        «ELSEIF EEnum.isInstance(ef.EType)-»
                            return «(ef.isBoolean() ? "is" : "get") + ef.name.toFirstUpper()»() != «ef.getCPPTypeSignature()»::«ef.defaultValueLiteral»;
                        «ELSE-»
                            return «(ef.isBoolean() ? "is" : "get") + ef.name.toFirstUpper()»() != «ef.defaultValueLiteral»;
                        «ENDIF-»
                    «ELSE-»
                        return ::ecorecpp::mapping::set_traits< ::«ef.EType.getFQN()» >::is_set(«(ef.isBoolean() ? "is" : "get") + ef.name.toFirstUpper()»());
                    «ENDIF-»
                «ENDIF-»
            «ENDIF-»
    «ENDFOREACH»
    }
    throw "Error: eIsSet() does not handle this featureID";
}

void «name»::eUnset ( ::ecore::EInt _featureID)
{
    switch (_featureID)
    {
    «FOREACH EAllStructuralFeatures.select(e|e.unsettable) AS ef-»
       «REM»
        case «ef.getCPPFQN(this)» :
            «IF EClass.isInstance(ef.EType)-»
                «IF ef.upperBound == 1-»
            «ef.getMemberName()» = NULL;
                «ELSE-»
            «ef.getMemberName()».clear();
                «ENDIF-»
            «ELSE-»
                «IF ef.isList() || ef.isMultiple()-»
            «ef.getMemberName()».clear();
                «ELSE-»
                    «IF ef.defaultValueLiteral != null -»
            «ef.getMemberName()» = «ef.defaultValueLiteral»;
                    «ELSE-»
            ::ecorecpp::mapping::set_traits< ::«ef.EType.getFQN()» >::unset(«ef.getMemberName()»);
                    «ENDIF-»
                «ENDIF-»
            «ENDIF-»
            return;
        «ENDREM»
    «ENDFOREACH»
    }
    throw "Error: eUnset() does not handle this featureID";
}

::ecore::EClass_ptr «name»::_eClass ()
{
    «LET "::"+EPackage.getFQN()+"::"+EPackage.getPackageName() AS pkg-»
    static ::ecore::EClass_ptr _eclass = «pkg»::_instance()->«EPackage.getPackageGetAttribute(this)»();
    return _eclass;
    «ENDLET-»
}

/** Set the local end of a reference with an EOpposite property.
 */
void «name»::_inverseAdd( ::ecore::EInt _featureID, [[maybe_unused]] ::ecore::EJavaObject const& _newValue)
{
    switch (_featureID)
    {
    «FOREACH EAllStructuralFeatures.select(e|!e.derived) AS ef-»
      «IF EReference.isInstance(ef)-»
      «LET ((EReference)ef) AS ref-»
        case «ef.getCPPFQN(this)» :
            {
      «IF ((EReference)ef).EOpposite != null-»
          ::ecore::EObject_ptr _t0 = ::ecorecpp::mapping::any::any_cast< ::ecore::EObject_ptr >(_newValue);
          «((EReference)ef).getPtr()» _t1 = std::dynamic_pointer_cast< ::«ef.EType.getFQN()» >(_t0);

          «IF ef.upperBound == 1-»
          «ref.getPtr()» _old_«ref.name» = get«ef.name.toFirstUpper()»();
          if (_old_«ref.name» && _old_«ref.name» != _t0)
          {
              ::ecore::EJavaObject _this = ::ecore::EObject::_this();
              _old_«ref.name»->::ecore::EObject::_inverseRemove(
              «ref.EOpposite.EContainingClass.EPackage.getPackageFQN()»::_instance()->«ref.EOpposite.EContainingClass.EPackage.getFeatureGetMember(ref.EOpposite)»(),
              _this);
          }

          // set reference
          basicset«ef.name.toFirstUpper()»(_t1);
          «ELSE-»
	      // add to a list
	      auto& container =
	          («((EReference)ef).getListImpl()»&)
	          ::«ef.EContainingClass.getFQN()»::get«ef.name.toFirstUpper()»();
	        container.basicAdd(_t1);
          «ENDIF-»
      «ENDIF-»
            }
            return;
      «ENDLET-»
      «ENDIF-»
    «ENDFOREACH»
    }
    throw "Error: _inverseAdd() does not handle this featureID";
}

/** Unset the local end of a reference with an EOpposite property.
 */
void «name»::_inverseRemove( ::ecore::EInt _featureID, [[maybe_unused]] ::ecore::EJavaObject const& _oldValue)
{
    switch (_featureID)
    {
    «FOREACH EAllStructuralFeatures.select(e|!e.derived) AS ef-»
      «IF EReference.isInstance(ef)-»
        case «ef.getCPPFQN(this)» :
            {
      «IF ((EReference)ef).EOpposite != null-»
          ::ecore::EObject_ptr _t0 = ::ecorecpp::mapping::any::any_cast< ::ecore::EObject_ptr >(_oldValue);
          «((EReference)ef).getPtr()» _t1 = std::dynamic_pointer_cast< ::«ef.EType.getFQN()» >(_t0);

          «IF ef.upperBound == 1-»
	      // set reference
	      if (basicget«ef.name.toFirstUpper()»() == _t1)
	          basicset«ef.name.toFirstUpper()»(nullptr);
          «ELSE-»
	      // add to a list
	      auto& container =
	          («((EReference)ef).getListImpl()»&)
	          ::«ef.EContainingClass.getFQN()»::get«ef.name.toFirstUpper()»();
	      container.basicRemove(_t1);
          «ENDIF-»
      «ENDIF-»
            }
            return;
      «ENDIF-»
    «ENDFOREACH»
    }
    throw "Error: _inverseRemove() does not handle this featureID";
}

«ENDFILE»
«ENDDEFINE»
